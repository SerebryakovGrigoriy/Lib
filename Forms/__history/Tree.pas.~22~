{ Форма "Дерево" }
unit Tree;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Spring.Container, CustomInterfaces;

type
  TFormTree = class(TForm, ITreeFormInterface)
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  protected
   FRefCount: Integer;
   function _AddRef: Integer; stdcall;  // управление подсчетом ссылок (увеличение значения счетчика FRefCount)
   function _Release: Integer; stdcall; // управление подсчетом ссылок (уменьшение значения счетчика FRefCount)
  public
    { Public declarations }
  function GetTreeForm: TForm;
  end;

var
  FormTree: TFormTree;

implementation

{$R *.dfm}

// Управление подсчетом ссылок (увеличение значения счетчика FRefCount)
function TFormTree._AddRef: Integer;
begin
  Result := InterlockedIncrement(FRefCount);
end;

// Управление подсчетом ссылок (уменьшение значения счетчика FRefCount)
function TFormTree._Release: Integer;
begin
  Result := InterlockedDecrement(FRefCount);
  if Result<=0 then
    Self.Free;
end;

// При закрытии формы освобождаем ресурсы
procedure TFormTree.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   Self.FreeOnRelease;
end;

// Возвращаем объект формы
function TFormTree.GetTreeForm: TForm;
begin
  Result:= Self;
end;

end.
